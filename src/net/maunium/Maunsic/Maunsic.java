package net.maunium.Maunsic;

import java.io.File;
import java.io.FileDescriptor;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.PrintStream;
import java.util.Arrays;

import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

import com.google.common.io.ByteStreams;

import net.maunium.Maunsic.Logging.ChatLogger;
import net.maunium.Maunsic.Logging.MaunsicLogger;
import net.maunium.Maunsic.Server.ServerHandler;
import net.maunium.Maunsic.Util.I18n;

import net.minecraft.client.Minecraft;

import net.minecraftforge.common.config.Configuration;
import net.minecraftforge.fml.common.Mod;
import net.minecraftforge.fml.common.Mod.EventHandler;
import net.minecraftforge.fml.common.Mod.Instance;
import net.minecraftforge.fml.common.ModMetadata;
import net.minecraftforge.fml.common.event.FMLInitializationEvent;
import net.minecraftforge.fml.common.event.FMLPostInitializationEvent;
import net.minecraftforge.fml.common.event.FMLPreInitializationEvent;

/**
 * The main class of Maunsic.
 * 
 * @author Tulir293
 * @since 0.1
 * @version 0.1 Alpha 1. Same as {@link #version}
 */
@Mod(modid = Maunsic.name, version = Maunsic.version, name = Maunsic.name, acceptedMinecraftVersions = "[1.8,1.9)", clientSideOnly = true, canBeDeactivated = true)
public class Maunsic {
	/** The official instance of Maunsic */
	@Instance(Maunsic.name)
	private static Maunsic instance;
	/** "Maunsic", which is the name of this mod. Most likely will never change. */
	public static final String name = "Maunsic";
	public static final String forMC = "1.8";
	public static final String version = "0.1-A1", longVersion = "0.1 Alpha 1";
	private static final File maunsicDir = new File(Minecraft.getMinecraft().mcDataDir, "config" + File.separator + "Maunsic" + File.separator);
	/** A standard Minecraft logger with the name "Maunsic" ({@link #name}) */
	private Logger log;
	/** The real out channel since Forge overrides System.out */
	public static PrintStream sout = new PrintStream(new FileOutputStream(FileDescriptor.out));
	/** The real err channel since Forge overrides System.err */
	public static PrintStream serr = new PrintStream(new FileOutputStream(FileDescriptor.err));
	/** Initialization time or -1 if the initialization has not finished. */
	private int construct = -1, preInit = -1, init = -1, postInit = -1;
	/** Maucros Configuration */
	private Configuration conf;
	
	public Maunsic() {
		if (!ServerHandler.canUse()) return;
		long st = Minecraft.getSystemTime();
		log = LogManager.getLogger("Maunsic");
		log.info("Loading Maunsic Logger (see logs/Maunsic/ for log files)");
		// Create the Maucros Logger.
		MaunsicLogger.create();
		// From here on, the debug and trace logger calls describe everything.
		getLogger().info("Maucros Logger opened from constructor in " + (construct = (int) (Minecraft.getSystemTime() - st)) + "ms.");
		return;
	}
	
	@EventHandler
	public void preInit(FMLPreInitializationEvent evt) {
		long st = Minecraft.getSystemTime();
		ModMetadata mm = evt.getModMetadata();
		mm.autogenerated = false;
		mm.name = name;
		mm.modId = name;
		mm.version = version;
		mm.authorList = Arrays.asList("Tulir293");
		mm.url = "http://maunium.net/forge/";
		mm.description = "The follower of Maucros, Maunsic. Made from scratch.";
		
		if (!ServerHandler.canUse()) {
			if (ServerHandler.killswitched) mm.description += "\nNOTE: Maunsic disabled due to using a killswitched version.";
			else if (!ServerHandler.licenced) mm.description += "\nNOTE: Maunsic disabled due to not having a licence.";
			return;
		}
		
		try {
			saveLangFiles();
		} catch (IOException e) {
			getLogger().error("Failed to save language files:");
			getLogger().catching(e);
		}
		conf = new Configuration(new File(getConfDir(), "conf.maudat"));
		conf.load();
		
		try {
			I18n.init(getConfDir("language"), conf.get(Configuration.CATEGORY_GENERAL, "language", "en_US").getString());
		} catch (IOException e) {
			getLogger().error("Failed to load I18n:");
			getLogger().catching(e);
		}
		
		conf.save();
		
		getLogger().info("PreInit complete in " + (init = (int) (System.currentTimeMillis() - st)) + "ms.");
	}
	
	@EventHandler
	public void init(FMLInitializationEvent evt) {
		if (!ServerHandler.canUse()) return;
		long st = Minecraft.getSystemTime();
		
		getLogger().info("Init complete in " + (init = (int) (System.currentTimeMillis() - st)) + "ms.");
	}
	
	@EventHandler
	public void postInit(FMLPostInitializationEvent evt) {
		if (!ServerHandler.canUse()) return;
		long st = Minecraft.getSystemTime();
		
		getLogger().info("PostInit complete in " + (init = (int) (System.currentTimeMillis() - st)) + "ms.");
		getLogger().info(name + " v" + longVersion + " for Minecraft " + forMC + " enabled in " + (construct + preInit + init + postInit) + "ms.");
	}
	
	@EventHandler
	public void deactivate(net.minecraftforge.fml.common.event.FMLModDisabledEvent evt) {
		
	}
	
	public static final MaunsicLogger getLogger() {
		return MaunsicLogger.getMaunsicLogger();
	}
	
	public static final ChatLogger getChatLogger() {
		return ChatLogger.getChatLogger();
	}
	
	/**
	 * Saves all premade language files.
	 */
	public void saveLangFiles() throws IOException {
		saveLangFile("en_US");
		saveLangFile("fi_FI");
	}
	
	/**
	 * Copies a language file from the lang folder inside the jar to minecraf/config/Maunsic/language/.
	 * 
	 * @param lang The name of the language file without the ending.
	 * @throws IOException If reading (Resource as Stream) or writing (bytestreams.copy) fails
	 */
	private void saveLangFile(String lang) throws IOException {
		File f = new File(getConfDir("language"), lang + ".lang");
		if (f.exists()) f.delete();
		InputStream input = Maunsic.class.getResourceAsStream("/lang/" + lang + ".lang");
		OutputStream output = new FileOutputStream(f);
		ByteStreams.copy(input, output);
		output.flush();
		output.close();
		input.close();
	}
	
	public File getConfDir(String dir) {
		File f = new File(maunsicDir, dir);
		if (!f.exists()) f.mkdirs();
		return f;
	}
	
	public File getConfDir() {
		if (!maunsicDir.exists()) maunsicDir.mkdirs();
		return maunsicDir;
	}
}
